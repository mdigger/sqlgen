{{define "generate queries" -}}
{{template "package header" .}}

import (
    "context"
{{- range $import, $prefix := .Imports}}
    {{with $prefix}}{{.}} {{end}}"{{$import}}"
{{- end}}
)

{{range .Queries -}}
// *** {{.Name}} ***

{{template "struct in" .}}

{{template "struct out" .}}

{{template "comments" . -}}
func (q Queries) {{name .Name}}(ctx context.Context
    {{- if .In.Fields}},
    {{- template "params in var" .}} {{template "params in type" .}}{{end -}}
    {{- if eq .Type.String "many" -}}, f func({{template "params out var" .}} {{template "params out type" .}}) error{{end -}}
    ) {{template "func return" .}} {
{{template "func body" . -}}
}

{{end}}

{{end}}

{{/********************************************************************/}}

{{define "params in type"}}
{{- if eq (len .In.Fields) 0 -}}
{{- else if eq (len .In.Fields) 1 -}}
    {{with index .In.Fields 0}}{{.Type}}{{end}}
{{- else if .In.Anchor -}}
    {{name .In.Anchor}}
{{- else if .In.Alias -}}
    {{name .In.Alias}}
{{- else -}}
    {{name .Name}}Params
{{- end -}}
{{end}}

{{define "params out type"}}
{{- if eq (len .Out.Fields) 0 -}}
{{- else if eq (len .Out.Fields) 1 -}}
    {{with index .Out.Fields 0}}{{.Type}}{{end}}
{{- else if .Out.Anchor -}}
    {{name .Out.Anchor}}
{{- else if .Out.Alias -}}
    {{name .Out.Alias}}
{{- else -}}
    {{name .Name}}Out
{{- end -}}
{{end}}

{{define "params in var"}}
{{- if eq (len .In.Fields) 0 -}}
{{- else if eq (len .In.Fields) 1 -}}
    {{with index .In.Fields 0}}{{param .Name}}{{end}}
{{- else -}}
    args
{{- end -}}
{{end}}

{{define "params out var"}}
{{- if eq (len .Out.Fields) 0 -}}
{{- else if eq (len .Out.Fields) 1 -}}
    {{with index .Out.Fields 0}}{{param .Name}}{{end}}
{{- else -}}
    out
{{- end -}}
{{end}}

{{define "params in list"}}
{{- if eq (len .In.Fields) 0 -}}
{{- else if eq (len .In.Fields) 1 -}}
    {{with index .In.Fields 0}}{{param .Name}}{{end}}
{{- else -}}
    {{range .In.Fields}}
    args.{{name .Name}},
    {{- end}}
{{- end -}}
{{end}}

{{define "params out list"}}
{{- if eq (len .Out.Fields) 0 -}}
{{- else if eq (len .Out.Fields) 1 -}}
    {{with index .Out.Fields 0}}&out{{end -}}
{{- else -}}
    {{range .Out.Fields}}
    &out.{{name .Name}},
    {{- end}}
{{end -}}
{{end}}

{{/********************************************************************/}}

{{define "struct in"}}
{{if and (not .In.Alias) (gt (len .In.Fields) 1)}}
{{template "comments" .In -}}
type {{template "params in type" .}} struct {
    {{- template "struct fields" .In.Fields}}
}
{{end}}
{{end}}

{{define "struct out"}}
{{if and (not .Out.Alias) (gt (len .Out.Fields) 1)}}
{{template "comments" .Out -}}
type {{template "params out type" .}} struct {
    {{- template "struct fields" .Out.Fields}}
}
{{end}}
{{end}}

{{define "struct fields"}}
{{- range .}}
    {{if gt (len .Comment) 1 -}}
    {{range .Comment}}// {{.}}
    {{end}}{{end -}}
    {{name .Name}} {{.Type}}{{if eq (len .Comment) 1}} // {{index .Comment 0}}{{end}}
{{- end}}
{{- end}}

{{define "comments"}}
{{range .Comment -}}
// {{.}}
{{end}}
{{- end}}

{{/********************************************************************/}}

{{define "func return"}}
{{- if eq .Type.String "affected" "id"}}(int64, error)
{{- else if eq .Type.String "one"}}({{template "params out type" .}}, error)
{{- else}}error
{{- end}}
{{- end}}

{{/********************************************************************/}}

{{define "func body"}}
{{- if eq .Type.String "many" -}}
	rows, err := q.db.QueryContext(ctx, {{template "sql" .}}
        {{- if .In.Fields}}, {{template "params in list" .}}{{end}})
    if err != nil {
        return err
    }
    defer rows.Close()

    var out {{template "params out type" .}}
    for rows.Next() {
		if err := rows.Scan({{template "params out list" .}}); err != nil {
			return err
		}

		if err := f(out); err != nil {
            return err
        }
	}

    if err := rows.Close(); err != nil {
        return err
    }

    return rows.Err()
{{- else if eq .Type.String "one" -}}
	row := q.db.QueryRowContext(ctx, {{template "sql" .}}
        {{- if .In.Fields}}, {{template "params in list" .}}{{end}})

    var out {{template "params out type" .}}
    err := row.Scan({{template "params out list" .}})

    return out, err
{{- else if eq .Type.String "affected" -}}
    result, err := q.db.ExecContext(ctx, {{template "sql" .}}
        {{- if .In.Fields}}, {{template "params in list" .}}{{end}})
    if err != nil {
        return 0, err
    }

    return result.RowsAffected()
{{- else if eq .Type.String "exist" -}}
    result, err := q.db.ExecContext(ctx, {{template "sql" .}}
        {{- if .In.Fields}}, {{template "params in list" .}}{{end}})
    if err != nil {
        return err
    }

    rows, err := result.RowsAffected()
    if err != nil {
        return err
    }

    if rows == 0 {
        return ErrNoRows
    }

    return nil
{{- else if eq .Type.String "id" -}}
    result, err := q.db.ExecContext(ctx, {{template "sql" .}}
        {{- if .In.Fields}}, {{template "params in list" .}}{{end}})
    if err != nil {
        return 0, err
    }

    return result.LastInsertId()
{{- else -}}
    _, err := q.db.ExecContext(ctx, {{template "sql" .}}
        {{- if .In.Fields}}, {{template "params in list" .}}{{end}})

    return err
{{- end}}
{{end}}

{{- define "sql" -}}
`-- {{.Name}}
{{.SQL}}`
{{- end -}}

{{/********************************************************************/}}

{{define "package header" -}}
// Code generated by sqlgen. DO NOT EDIT.
{{- with .Generator}}
// version: {{.Name}}{{with .Version}} {{.}}{{end}}
{{- end}}
{{- with .Source}}
// source: {{.}}
{{- end}}

package {{with .Generator.Package}}{{.}}{{else}}database{{end}}
{{- end}}

{{/********************************************************************/}}

{{define "generate db"}}
{{- template "package header" .}}

import (
    "context"
    "database/sql"
    "errors"
)

type Queries struct {
    db interface {
    	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	    QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	    QueryRowContext(context.Context, string, ...interface{}) *sql.Row
    }
}

func New(db *sql.DB) Queries {
    return Queries{db: db}
}

var (
    ErrTxNotSupported = errors.New("sql: transaction not supported")
    ErrNoRows = sql.ErrNoRows
)

func (q Queries) WithTx(ctx context.Context, opt *sql.TxOptions, f func(q Queries) error) (err error) {
	db, ok := q.db.(interface{
        BeginTx(context.Context, *sql.TxOptions) (*sql.Tx, error)
    })
	if !ok {
		return ErrTxNotSupported
	}

	tx, err := db.BeginTx(ctx, opt)
	if err != nil {
		return err
	}

	defer func() {
		if err == nil {
			err = tx.Commit()
		}
		if err != nil {
			err = tx.Rollback()
		}
	}()

	return f(Queries{db: tx})
}
{{end -}}
